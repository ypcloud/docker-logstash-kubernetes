filter {
  if "kubernetes" and "docker" in [tags] {

    grok {
        match => { "path" => "/var/log/containers/%{DATA:[kubernetes][pod_name]}_%{DATA:[kubernetes][namespace_name]}_%{GREEDYDATA:[kubernetes][container_name]}-%{DATA:[kubernetes][container_id]}.log"}
    }
    
    # Drop some namespaces
    if [kubernetes][namespace_name] == "kube-system" or
       [kubernetes][namespace_name] == "sysdig-trial" {
      drop {}
    }

    json {
      source => "message"
      target => "message"
    }

    # Grab a timestamp from the actual message, rather than at the point of
    # which events arrive
    if [message][time] {
      date {
        match => ["[message][time]", "ISO8601"]
        remove_field => [ "[message][time]" ]
      }
    }

    # for K8S ingress resouruces matching the pattern and stdout. try to parse as access logs
    if [kubernetes][pod_name] =~ /nginx.+ingress*/ and [message][stream] == "stdout" {
      mutate {
        add_tag => [ "k8s-ingress-log" ]
      }

      grok {
        match => {
          "[message][log]" => '%{IPORHOST:clientip} %{DATA:ingress.host} \[%{IPORHOST:x_forwarded_for}\] %{NUMBER:ingress.port} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response:int} (?:%{NUMBER:bytes:int}|-) (?:\"(?:%{URI:referrer}|-)\"|%{QS:referrer}) \"%{DATA:agent}\" %{NUMBER:request_length:int} %{NUMBER:request_time:float} \[%{DATA:ingress.upstream_name}\] %{GREEDYDATA:ingress.upstream_data}'
        }
      }
    }

    # Check if message["log"] looks like json and try to encode it and flatten
    # log fields out into a message field
    if [message][log] =~ /^\{.*\}$/ {
      json {
        source => "[message][log]"
        target => "[message_json]"
        remove_field => [ "[message]" ]
      }
    } else if [message][log] {
      mutate {
        replace => { "message" => "%{[message][log]}" }
      }
    }

    # # Extract kubernetes metadata
    # kubernetes {
    #   add_tag => ["kubernetes_filtered"]
    # }

    mutate {
      remove_field => [ "host", "path" ]
      add_field => { "[meta][cloud][provider]" => "${K8S_CLOUD_PROVIDER:unknown}" }
      add_tag => ["kubernetes_filtered"]
    }
  }
}

output {
  if "k8s-ingress-log" in [tags] {

    amazon_es {
        hosts => ["%ELASTICSEARCH_HOST%"]
        region => "us-east-1"
        aws_access_key_id => '${AWS_ACCESS_KEY_ID}'
        aws_secret_access_key => '${AWS_SECRET_ACCESS_KEY}'
        document_type => "kubernetes"
        index => "cld-ingressaccesslogs-%{[meta][cloud][provider]}-%{+YYYY.MM.dd}"
        idle_flush_time => %ELASTICSEARCH_IDLE_FLUSH_TIME%
        flush_size => %ELASTICSEARCH_FLUSH_SIZE%
    }

  } else if "kubernetes_filtered" in [tags] {

    amazon_es {
        hosts => ["%ELASTICSEARCH_HOST%"]
        region => "us-east-1"
        aws_access_key_id => '${AWS_ACCESS_KEY_ID}'
        aws_secret_access_key => '${AWS_SECRET_ACCESS_KEY}'
        document_type => "kubernetes"
        index => "cld-%{[kubernetes][namespace_name]}-%{[meta][cloud][provider]}-%{+YYYY.MM.dd}"
        idle_flush_time => %ELASTICSEARCH_IDLE_FLUSH_TIME%
        flush_size => %ELASTICSEARCH_FLUSH_SIZE%
    }
  }
#  stdout { codec => rubydebug }
}
